{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nconst useLogoutOnClose = () => {\n  _s();\n  useEffect(() => {\n    // Set a flag in sessionStorage when the page is loaded or refreshed\n    sessionStorage.setItem('isRefreshing', 'true');\n\n    // Function to handle the tab close event\n    const handleBeforeUnload = () => {\n      // If sessionStorage flag is removed (tab truly closed), clear localStorage\n      if (!sessionStorage.getItem('isRefreshing')) {\n        localStorage.removeItem('user');\n      }\n    };\n\n    // Attach the event listener to the window beforeunload event\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup function to remove the event listener\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []); // The empty array ensures this effect runs only once, on component mount\n};\n_s(useLogoutOnClose, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default useLogoutOnClose;","map":{"version":3,"names":["useEffect","useLogoutOnClose","_s","sessionStorage","setItem","handleBeforeUnload","getItem","localStorage","removeItem","window","addEventListener","removeEventListener"],"sources":["C:/Users/Hp/Desktop/FAST/Software Engineering/Recipe Genie/Frontend/src/hooks/useLogoutOnClose.js"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nconst useLogoutOnClose = () => {\r\n  useEffect(() => {\r\n    // Set a flag in sessionStorage when the page is loaded or refreshed\r\n    sessionStorage.setItem('isRefreshing', 'true');\r\n\r\n    // Function to handle the tab close event\r\n    const handleBeforeUnload = () => {\r\n      // If sessionStorage flag is removed (tab truly closed), clear localStorage\r\n      if (!sessionStorage.getItem('isRefreshing')) {\r\n        localStorage.removeItem('user');\r\n      }\r\n    };\r\n\r\n    // Attach the event listener to the window beforeunload event\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n    // Cleanup function to remove the event listener\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n    };\r\n  }, []); // The empty array ensures this effect runs only once, on component mount\r\n};\r\n\r\nexport default useLogoutOnClose;\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7BF,SAAS,CAAC,MAAM;IACd;IACAG,cAAc,CAACC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC;;IAE9C;IACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;MAC/B;MACA,IAAI,CAACF,cAAc,CAACG,OAAO,CAAC,cAAc,CAAC,EAAE;QAC3CC,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;MACjC;IACF,CAAC;;IAED;IACAC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEL,kBAAkB,CAAC;;IAE3D;IACA,OAAO,MAAM;MACXI,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEN,kBAAkB,CAAC;IAChE,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACV,CAAC;AAACH,EAAA,CArBID,gBAAgB;AAuBtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}